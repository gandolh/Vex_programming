{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\narm_motor = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\n# vex-vision-config:begin\nvision_5__RED_COLA = Signature(1, 5317, 10163, 7740,-1473, -443, -958,1.2, 0)\nvision_5__CYAN_SWEPS = Signature(2, -4451, -3749, -4100,1135, 1999, 1567,3, 0)\nvision_5__SIG_3 = Signature(3, 0, 0, 0,0, 0, 0,3, 0)\nvision_5__SIG_4 = Signature(4, 0, 0, 0,0, 0, 0,3, 0)\nvision_5__SIG_5 = Signature(5, 0, 0, 0,0, 0, 0,3, 0)\nvision_5__SIG_6 = Signature(6, 0, 0, 0,0, 0, 0,3, 0)\nvision_5__SIG_7 = Signature(7, 0, 0, 0,0, 0, 0,3, 0)\nvision_5 = Vision(Ports.PORT5, 62, vision_5__RED_COLA, vision_5__CYAN_SWEPS, vision_5__SIG_3, vision_5__SIG_4, vision_5__SIG_5, vision_5__SIG_6, vision_5__SIG_7)\n# vex-vision-config:end\npotentiometer_a = Potentiometer(brain.three_wire_port.a)\nclaw_motor = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nfrontLeftMotor = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nfrontRightMotor = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n\n\n\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n\n\n# Begin project code\nclass Settings:\n    def __init__(self):\n        self.image_checking = True\n        self.autonomous_drive = False\n        self.setup()\n\n    def controller_R2_Pressed(self):\n        arm_motor.spin(FORWARD)\n        while controller_1.buttonR2.pressing():\n            wait(5, MSEC)\n        arm_motor.stop()\n\n    def controller_R1_Pressed(self):\n        arm_motor.spin(REVERSE)\n        while controller_1.buttonR1.pressing():\n            wait(5, MSEC)\n        arm_motor.stop()\n        \n    def controller_L2_Pressed(self):\n        claw_motor.spin(FORWARD)\n        while controller_1.buttonL2.pressing():\n            wait(5, MSEC)\n        claw_motor.stop()\n\n    def controller_L1_Pressed(self):\n        claw_motor.spin(REVERSE)\n        while controller_1.buttonL1.pressing():\n            wait(5, MSEC)\n        claw_motor.stop()\n\n    def controller_B_Pressed(self):\n        self.image_checking = not self.image_checking;\n\n    # def controller_A_Pressed(self):\n    #     self.image_checking = False\n    #     self.autonomous_drive = not self.autonomous_drive;\n\n    def setup(self):\n        controller_1.buttonR2.pressed(self.controller_R2_Pressed)\n        controller_1.buttonR1.pressed(self.controller_R1_Pressed)\n        controller_1.buttonL2.pressed(self.controller_L2_Pressed)\n        controller_1.buttonL1.pressed(self.controller_L1_Pressed)\n        controller_1.buttonB.pressed(self.controller_B_Pressed)\n        # controller_1.buttonA.pressed(self.controller_A_Pressed)\n        wait(15, MSEC)\n        arm_motor.set_stopping(HOLD)\n        # arm_motor.set_velocity(30, PERCENT)\n\ndef openClaw():\n    # claw_motor.spin(REVERSE)\n    # while not claw_motor.is_spinning():\n    #     pass\n    # claw_motor.stop()\n    pass\n\ndef closeClaw():\n    # claw_motor.spin(FORWARD)\n    # while not claw_motor.is_spinning():\n    #     pass\n    # claw_motor.stop()\n    pass\n# class Autonomous:\n#     def __init__(self):\n#         self.rotateZ = FORWARD\n#         self.rotateArm = FORWARD\n#         self.rotateClaw = FORWARD\n\n#     def move(self):\n#         # print('move')\n#         # closeClaw()\n#         #rotire masina\n#         frontLeftMotor.set_velocity(10, PERCENT)\n#         frontRightMotor.set_velocity(10, PERCENT)\n\n#         frontLeftMotor.spin(\n#             (FORWARD if self.rotateZ == FORWARD else REVERSE)\n#         );\n#         frontRightMotor.spin(\n#             ( FORWARD if self.rotateZ == FORWARD else FORWARD)\n            \n#         );\n\n#         self.rotateZ = (\n#             REVERSE if self.rotateZ == FORWARD else FORWARD\n#             )\n\n#         #rotire brat\n#         # print(self.rotateArm)\n#         arm_motor.spin(self.rotateArm)\n#         self.rotateArm = (\n#             REVERSE if self.rotateArm == FORWARD else FORWARD\n#             )\n\n#         #inchide si deschide gheara\n#         claw_motor.spin(self.rotateClaw)\n#         self.rotateClaw = (\n#             REVERSE if self.rotateClaw == FORWARD else FORWARD\n#         )\n#         wait(1,SECONDS)\n#         # # frontLeftMotor.stop()\n#         # # frontRightMotor.stop()\n#         # # arm_motor.stop()\n#         # # claw_motor.stop()\n\ndef moveCheck():\n    x = controller_1.axis3.position()\n    y = controller_1.axis4.position()\n    frontLeftMotor.set_velocity(y + x, PERCENT)\n    frontLeftMotor.spin(FORWARD)\n\n    frontRightMotor.set_velocity(y - x, PERCENT)\n    frontRightMotor.spin(FORWARD)\n    \n    wait(20, MSEC)\n\n\ndef imageCheck():    \n    frontLeftMotor.set_velocity(15, PERCENT)\n    frontRightMotor.set_velocity(15, PERCENT)\n    camera_offset= 0;\n    print('before vision detection')\n    vision_object = vision_5.take_snapshot(vision_5__RED_COLA)\n    if vision_object is not None:\n        vision_object_detected = vision_5.largest_object()\n        print('object found')\n        print(vision_object_detected.centerX)\n        if vision_object_detected.centerX >100 + camera_offset:\n            #turn right\n            frontLeftMotor.spin(FORWARD);\n            frontRightMotor.spin(REVERSE);\n            pass\n        elif vision_object_detected.centerX <60 + camera_offset:\n            #turn left\n            frontLeftMotor.spin(FORWARD);\n            frontRightMotor.spin(REVERSE);\n        else :\n            if vision_object_detected.width < 7:\n                #drive toward\n                frontLeftMotor.spin(FORWARD);\n                frontRightMotor.spin(FORWARD);\n            else:\n                #stop\n                frontLeftMotor.stop();\n                frontRightMotor.stop();\n    else:\n        print('not found object')\n    # frontLeftMotor.stop();\n    # frontRightMotor.stop();\n    wait(500, MSEC)\n\n# def loggingPotentiometer():\n#     brain.screen.print(\"Angle - Degrees:\", potentiometer_a.angle(DEGREES))\n#     brain.screen.next_row()\n\n#     brain.screen.print(\"Angle - Percent:\", potentiometer_a.angle(PERCENT))\n#     brain.screen.next_row()\n\n\ndef main():\n    settings = Settings()\n    # autonomous = Autonomous()\n    openClaw()\n    # wait(5,SECONDS)\n    # closeClaw()\n    while True:\n        # brain.screen.clear_screen()\n        # brain.screen.set_cursor(1,1)\n        moveCheck()\n        # print(settings.autonomous_drive)\n        # if(settings.autonomous_drive == True):\n        #     autonomous.move()\n        if settings.image_checking == True:\n            imageCheck()\n        #loggingPotentiometer()\n        # wait(20, MSEC)\nmain()","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"true","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[8],"name":"arm_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[5],"name":"vision_5","customName":false,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":62,\"signatures\":[{\"name\":\"RED_COLA\",\"parameters\":{\"uMin\":5317,\"uMax\":10163,\"uMean\":7740,\"vMin\":-1473,\"vMax\":-443,\"vMean\":-958,\"rgb\":1,\"type\":0,\"name\":\"RED_COLA\"},\"range\":1.2},{\"name\":\"CYAN_SWEPS\",\"parameters\":{\"uMin\":-4451,\"uMax\":-3749,\"uMean\":-4100,\"vMin\":1135,\"vMax\":1999,\"vMean\":1567,\"rgb\":1,\"type\":0,\"name\":\"CYAN_SWEPS\"},\"range\":3},{\"name\":\"SIG_3\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_3\"},\"range\":3},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":3},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":3},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":3},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":3}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22},{"port":[1],"name":"potentiometer_a","customName":false,"deviceType":"Potentiometer","deviceClass":"pot","setting":{"id":"partner"},"triportSourcePort":22},{"port":[3],"name":"claw_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[1],"name":"frontLeftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[10],"name":"frontRightMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}